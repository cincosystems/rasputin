syntax = "proto2";

package rasputin;

//
// Client <-> rasputin server messages
//
message SetReq {
  required bytes key = 1;
  required bytes value = 2;
}

message SetRes {
  required bool success = 1;
  required uint64 txid = 2;
  optional string err = 3;
}

message GetReq {
  required bytes key = 1;
}

message GetRes {
  required bool success = 1;
  required uint64 txid = 2;
  required bytes value = 3;
  optional string err = 4;
}

message CASReq {
  required bytes key = 1;
  required bytes value = 2;
  required bytes oldvalue = 3;
}

message CASRes {
  required bool success = 1;
  required uint64 txid = 2;
  optional string err = 3;
}

message WatchReq {
  required bytes key = 1;
  required uint64 lasttxid = 2;
  required bool recursive = 3;
  required bool historical = 4;
}

message VersionedKV {
  required uint64 txid = 1;
  required uint64 term = 2;
  required bytes key = 3;
  required bytes value = 4;
}

message WatchRes {
  required bool success = 1;
  repeated VersionedKV history = 2;
  optional string err = 3;
}

message RedirectRes {
  required bool success = 1;
  required uint64 msgid = 2;
  optional string address = 3;
  optional string err = 4;
}

// client top-levl API
message CliReq {
  optional GetReq get = 1;
  optional SetReq set = 2;
  optional CASReq cas = 3;
  optional WatchReq watch = 4;
}

message CliRes {
  optional GetRes get = 1;
  optional SetRes set = 2;
  optional CASRes cas = 3;
  optional WatchRes watch = 4;
  optional RedirectRes redirect = 5;
}

//
// Leadership
//
message VoteReq {
  required uint64 term = 1;
  required uint64 last_tx_term = 2;
  required uint64 maxtxid = 3;
}

message VoteRes {
  required bool success = 1;
  required uint64 term = 2;
}

//
// Replication
//
message BatchReq {
  required uint64 from_txid = 1;
  required uint64 from_term = 2;
}
message BatchPush {
  required uint64 batch_id = 1;
  required uint64 from_txid = 2;
  required uint64 from_term = 3;
  repeated VersionedKV batch = 4;
}
message BatchRes {
  required bool accepted = 1;
  required uint64 batch_id = 2;
}

// server<->server top-level api
message PeerMsg {
  required uint64 srvid = 1;
  optional VoteReq vote_req = 2;
  optional VoteRes vote_res = 3;
  optional BatchReq batch_req = 5;
  optional BatchPush batch_push = 6;
  optional BatchRes batch_res = 10;
}
