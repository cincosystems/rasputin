syntax = "proto2";

package rasputin;

//
// Client <-> rasputin server messages
//
message SetReq {
  required bytes value = 1;
}

message SetRes {
  required bool success = 1;
  required uint64 txid = 2;
  optional string err = 3;
}

message GetReq {
}

message GetRes {
  required bool success = 1;
  required uint64 txid = 2;
  optional bytes value = 3;
  optional string err = 4;
}

message CASReq {
  optional bytes new_value = 1;
  optional bytes old_value = 2;
}

message CASRes {
  required bool success = 1;
  required uint64 txid = 2;
  optional bytes value = 3;
  optional string err = 4;
}

message DelReq {
}

message DelRes {
  required bool success = 1;
  required uint64 txid = 2;
  required bytes value = 3;
  optional string err = 4;
}

message WatchReq {
  required uint64 last_txid = 1;
  required bool recursive = 2;
  required bool historical = 3;
}

message WatchRes {
  required bool success = 1;
  repeated Mutation history = 2;
  optional string err = 3;
}

message RedirectRes {
  required bool success = 1;
  optional string address = 2;
  optional string err = 3;
}

// datatypes
enum MutationType {
  KVSET = 1;
  KVCAS = 2;
  KVDEL = 3;
}

message Mutation {
  required MutationType type = 1;
  required Version version = 2;
  required bytes key = 3;
  optional bytes value = 4;
  optional bytes old_value = 5;
}

message Version {
  required uint64 txid = 1;
  required uint64 term = 2;
}

// client top-levl API
message CliReq {
  required bytes key = 1;
  required uint64 req_id = 2;
  optional GetReq get = 3;
  optional SetReq set = 4;
  optional CASReq cas = 5;
  optional DelReq del = 6;
  optional WatchReq watch = 7;
}

message CliRes {
  required uint64 req_id = 1;
  optional GetRes get = 2;
  optional SetRes set = 3;
  optional CASRes cas = 4;
  optional DelRes del = 5;
  optional WatchRes watch = 6;
  optional RedirectRes redirect = 7;
}

//
// Leadership
//
message VoteReq {
  required uint64 term = 1;
  required uint64 last_learned_term = 2;
  required uint64 last_learned_txid = 3;
  required uint64 last_accepted_term = 4;
  required uint64 last_accepted_txid = 5;
}

message VoteRes {
  required bool success = 1;
  required uint64 term = 2;
}

//
// Replication
//
message Append {
  required uint64 from_txid = 1;
  required uint64 from_term = 2;
  repeated Mutation batch = 3;
  required uint64 last_learned_txid = 4;
}

message AppendRes {
  required bool accepted = 1;
  optional uint64 last_accepted_txid = 2;
  optional uint64 last_accepted_term = 3;
}

// server<->server top-level api
message PeerMsg {
  required bytes range_prefix = 1;
  required string srvid = 2;
  optional VoteReq vote_req = 3;
  optional VoteRes vote_res = 4;
  optional Append append = 5;
  optional AppendRes append_res = 6;
  optional CreateMeta create_meta = 7;
}

//
// Meta
//

message CreateMeta {}

enum CollectionType {
  KV = 1;
  LOG = 2;
  OBJECT = 3;
  TIMESERIES = 4;
}

message RetentionPolicy {
  required uint64 hours = 1;
}

message Collection {
  required bytes prefix = 1;
  required CollectionType type = 2;
  required string name = 3;
  optional RetentionPolicy retention_policy = 4;
  optional uint32 replication_factor = 5;
}

message Replica {
  required string address = 1;
  required bytes id = 2;
}

message Range {
  required bytes lower = 1;
  required bytes upper = 2;
  required CollectionType type = 3;
  required string name = 4;
  repeated Replica replicas = 5;
}

message Meta {
  repeated Collection collections = 1;
  repeated Range ranges = 2;
}
